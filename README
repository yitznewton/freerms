FreERMS
=======

FreERMS is an electronic resource management system for libraries. It is
written in PHP using the symfony framework (1.4). It has been tested on
a Linux system with PHP 5.3.

Installation
------------

* Clone the git repo

* Specify the location of the symfony libraries in
  `config/ProjectConfiguration.class.php`

* Specify your database connection in
  `config/databases.yml`

* Add missing directories:

        /home/fred/freerms$ mkdir log

* Install sfGuardPlugin and publish plugin assets:

        /home/fred/freerms$ ./symfony plugin:install sfGuardPlugin
        /home/fred/freerms$ ./symfony plugin:publish-assets

* Run a Propel build. The first command will initialize and prepopulate
  your database with basic settings; the others will rebuild data classes,
  leaving the database unchanged:

        /home/fred/freerms$ ./symfony propel:build-all-load
        # or
        /home/fred/freerms$ ./symfony propel:build-model
        /home/fred/freerms$ ./symfony propel:build-forms
        /home/fred/freerms$ ./symfony propel:build-filters

* Create a superuser:

        /home/fred/freerms$ ./symfony guard:create-user jimbo mypassword
        /home/fred/freerms$ ./symfony guard:promote jimbo

At this point, you will be able to set your web server's document root to
symfony's `web` directory, and connect to the `/admin` app with the user
you have just created. In order to use the resolver (i.e. public-facing)
app, you will need to associate your user with one or more libraries, by
adding rows to the sf_guard_user_group table. You can modify user data
via scripts or directly in the database, or create an admin module within
symfony.

Access handlers
---------------

One of the main functions of FreERMS is acting as a link resolver to your
institution's databases, which includes invoking a proxy server or Referer-
based authentication as needed. Resources can be assigned the proper
"access handler" to accomplish this: one for on-campus users, and another
for off-campus users. A number of standard access handlers are included with
FreERMS, including one for ticket-based EZproxy authentication, and ebrary
single sign-on. Inevitably, however, some resources will require
local customization.

Creation of a custom access handler involves writing a PHP class that extends
`BaseAccessHandler` with the name `AccessInfoXYZAccessHandler` according to
the resources AccessInfo object, and placing the class file in
`/lib/access/custom/`. FreERMS will call the `execute()` method of the
`AccessHandler` instance when a user requests the resource. A sample
AccessHandler has been provided with FreERMS.

Caching frontend pages
----------------------

The frontend database listing pages are relatively expensive to the
database. To enable the frontend cache:

* Uncomment the `cache: true` setting in
  `apps/resolver/modules/database/config/settings.yml`

Extending FreERMS
-----------------

It is not difficult to modify FreERMS, for example, to use an alternate user
backend. (Explain how.)
