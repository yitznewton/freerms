<?php


/**
 * This class defines the structure of the 'organizations' table.
 *
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Fri May 21 12:09:47 2010
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class OrganizationTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.OrganizationTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('organizations');
		$this->setPhpName('Organization');
		$this->setClassname('Organization');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
		$this->addColumn('NAME', 'Name', 'VARCHAR', true, 255, null);
		$this->addColumn('ALT_NAME', 'AltName', 'VARCHAR', false, 255, null);
		$this->addColumn('ACCOUNT_NUMBER', 'AccountNumber', 'VARCHAR', false, 40, null);
		$this->addColumn('ADDRESS', 'Address', 'LONGVARCHAR', false, null, null);
		$this->addColumn('PHONE', 'Phone', 'VARCHAR', false, 40, null);
		$this->addColumn('FAX', 'Fax', 'VARCHAR', false, 40, null);
		$this->addColumn('NOTICE_ADDRESS_LICENSOR', 'NoticeAddressLicensor', 'LONGVARCHAR', false, null, null);
		$this->addForeignKey('IP_REG_METHOD_ID', 'IpRegMethodId', 'INTEGER', 'ip_reg_methods', 'ID', false, null, null);
		$this->addColumn('IP_REG_URI', 'IpRegUri', 'VARCHAR', false, 255, null);
		$this->addColumn('IP_REG_USERNAME', 'IpRegUsername', 'VARCHAR', false, 50, null);
		$this->addColumn('IP_REG_PASSWORD', 'IpRegPassword', 'VARCHAR', false, 50, null);
		$this->addForeignKey('IP_REG_CONTACT_ID', 'IpRegContactId', 'INTEGER', 'contacts', 'ID', false, null, null);
		$this->addColumn('IP_REG_FORCE_MANUAL', 'IpRegForceManual', 'BOOLEAN', false, null, null);
		$this->addColumn('NOTE', 'Note', 'LONGVARCHAR', false, null, null);
		$this->addColumn('UPDATED_AT', 'UpdatedAt', 'TIMESTAMP', true, null, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('IpRegMethod', 'IpRegMethod', RelationMap::MANY_TO_ONE, array('ip_reg_method_id' => 'id', ), 'SET NULL', 'CASCADE');
    $this->addRelation('Contact', 'Contact', RelationMap::MANY_TO_ONE, array('ip_reg_contact_id' => 'id', ), 'SET NULL', 'CASCADE');
    $this->addRelation('Acquisition', 'Acquisition', RelationMap::ONE_TO_MANY, array('id' => 'vendor_org_id', ), 'CASCADE', 'CASCADE');
    $this->addRelation('Contact', 'Contact', RelationMap::ONE_TO_MANY, array('id' => 'org_id', ), 'SET NULL', 'CASCADE');
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
			'symfony_timestampable' => array('update_column' => 'updated_at', ),
		);
	} // getBehaviors()

} // OrganizationTableMap
