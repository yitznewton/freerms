<?php

/**
 * Base class that represents a row from the 'admin_infos' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Jul 21 11:41:56 2009
 *
 * @package    lib.model.om
 */
abstract class BaseAdminInfo extends BaseObject  implements Persistent {


  const PEER = 'AdminInfoPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        AdminInfoPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the ui_config_available field.
	 * @var        boolean
	 */
	protected $ui_config_available;

	/**
	 * The value for the subscriber_branding_available field.
	 * @var        boolean
	 */
	protected $subscriber_branding_available;

	/**
	 * The value for the subscriber_branding_note field.
	 * @var        string
	 */
	protected $subscriber_branding_note;

	/**
	 * The value for the personalized_features_available field.
	 * @var        boolean
	 */
	protected $personalized_features_available;

	/**
	 * The value for the inbound_linking_available field.
	 * @var        boolean
	 */
	protected $inbound_linking_available;

	/**
	 * The value for the open_url_compliance_available field.
	 * @var        boolean
	 */
	protected $open_url_compliance_available;

	/**
	 * The value for the linking_note field.
	 * @var        string
	 */
	protected $linking_note;

	/**
	 * The value for the marc_records_available field.
	 * @var        boolean
	 */
	protected $marc_records_available;

	/**
	 * The value for the marc_record_note field.
	 * @var        string
	 */
	protected $marc_record_note;

	/**
	 * The value for the ss_360_search_available field.
	 * @var        boolean
	 */
	protected $ss_360_search_available;

	/**
	 * The value for the usage_stats_available field.
	 * @var        boolean
	 */
	protected $usage_stats_available;

	/**
	 * The value for the usage_stats_standards_compliance field.
	 * @var        string
	 */
	protected $usage_stats_standards_compliance;

	/**
	 * The value for the usage_stats_delivery_id field.
	 * @var        int
	 */
	protected $usage_stats_delivery_id;

	/**
	 * The value for the usage_stats_format_id field.
	 * @var        int
	 */
	protected $usage_stats_format_id;

	/**
	 * The value for the usage_stats_freq_id field.
	 * @var        int
	 */
	protected $usage_stats_freq_id;

	/**
	 * The value for the usage_stats_uri field.
	 * @var        string
	 */
	protected $usage_stats_uri;

	/**
	 * The value for the usage_stats_username field.
	 * @var        string
	 */
	protected $usage_stats_username;

	/**
	 * The value for the usage_stats_password field.
	 * @var        string
	 */
	protected $usage_stats_password;

	/**
	 * The value for the usage_stats_note field.
	 * @var        string
	 */
	protected $usage_stats_note;

	/**
	 * The value for the software_requirements field.
	 * @var        string
	 */
	protected $software_requirements;

	/**
	 * The value for the system_status_uri field.
	 * @var        string
	 */
	protected $system_status_uri;

	/**
	 * The value for the product_advisory_note field.
	 * @var        string
	 */
	protected $product_advisory_note;

	/**
	 * The value for the training_info field.
	 * @var        string
	 */
	protected $training_info;

	/**
	 * The value for the admin_doc_uri field.
	 * @var        string
	 */
	protected $admin_doc_uri;

	/**
	 * The value for the user_doc_uri field.
	 * @var        string
	 */
	protected $user_doc_uri;

	/**
	 * The value for the note field.
	 * @var        string
	 */
	protected $note;

	/**
	 * The value for the deleted_at field.
	 * @var        string
	 */
	protected $deleted_at;

	/**
	 * @var        InfoExchangeMethod
	 */
	protected $aInfoExchangeMethod;

	/**
	 * @var        UsageStatsFormat
	 */
	protected $aUsageStatsFormat;

	/**
	 * @var        UsageStatsFreq
	 */
	protected $aUsageStatsFreq;

	/**
	 * @var        array EResource[] Collection to store aggregation of EResource objects.
	 */
	protected $collEResources;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEResources.
	 */
	private $lastEResourceCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseAdminInfo object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [ui_config_available] column value.
	 * 
	 * @return     boolean
	 */
	public function getUiConfigAvailable()
	{
		return $this->ui_config_available;
	}

	/**
	 * Get the [subscriber_branding_available] column value.
	 * 
	 * @return     boolean
	 */
	public function getSubscriberBrandingAvailable()
	{
		return $this->subscriber_branding_available;
	}

	/**
	 * Get the [subscriber_branding_note] column value.
	 * 
	 * @return     string
	 */
	public function getSubscriberBrandingNote()
	{
		return $this->subscriber_branding_note;
	}

	/**
	 * Get the [personalized_features_available] column value.
	 * 
	 * @return     boolean
	 */
	public function getPersonalizedFeaturesAvailable()
	{
		return $this->personalized_features_available;
	}

	/**
	 * Get the [inbound_linking_available] column value.
	 * 
	 * @return     boolean
	 */
	public function getInboundLinkingAvailable()
	{
		return $this->inbound_linking_available;
	}

	/**
	 * Get the [open_url_compliance_available] column value.
	 * 
	 * @return     boolean
	 */
	public function getOpenUrlComplianceAvailable()
	{
		return $this->open_url_compliance_available;
	}

	/**
	 * Get the [linking_note] column value.
	 * 
	 * @return     string
	 */
	public function getLinkingNote()
	{
		return $this->linking_note;
	}

	/**
	 * Get the [marc_records_available] column value.
	 * 
	 * @return     boolean
	 */
	public function getMarcRecordsAvailable()
	{
		return $this->marc_records_available;
	}

	/**
	 * Get the [marc_record_note] column value.
	 * 
	 * @return     string
	 */
	public function getMarcRecordNote()
	{
		return $this->marc_record_note;
	}

	/**
	 * Get the [ss_360_search_available] column value.
	 * 
	 * @return     boolean
	 */
	public function getSs360SearchAvailable()
	{
		return $this->ss_360_search_available;
	}

	/**
	 * Get the [usage_stats_available] column value.
	 * 
	 * @return     boolean
	 */
	public function getUsageStatsAvailable()
	{
		return $this->usage_stats_available;
	}

	/**
	 * Get the [usage_stats_standards_compliance] column value.
	 * 
	 * @return     string
	 */
	public function getUsageStatsStandardsCompliance()
	{
		return $this->usage_stats_standards_compliance;
	}

	/**
	 * Get the [usage_stats_delivery_id] column value.
	 * 
	 * @return     int
	 */
	public function getUsageStatsDeliveryId()
	{
		return $this->usage_stats_delivery_id;
	}

	/**
	 * Get the [usage_stats_format_id] column value.
	 * 
	 * @return     int
	 */
	public function getUsageStatsFormatId()
	{
		return $this->usage_stats_format_id;
	}

	/**
	 * Get the [usage_stats_freq_id] column value.
	 * 
	 * @return     int
	 */
	public function getUsageStatsFreqId()
	{
		return $this->usage_stats_freq_id;
	}

	/**
	 * Get the [usage_stats_uri] column value.
	 * 
	 * @return     string
	 */
	public function getUsageStatsUri()
	{
		return $this->usage_stats_uri;
	}

	/**
	 * Get the [usage_stats_username] column value.
	 * 
	 * @return     string
	 */
	public function getUsageStatsUsername()
	{
		return $this->usage_stats_username;
	}

	/**
	 * Get the [usage_stats_password] column value.
	 * 
	 * @return     string
	 */
	public function getUsageStatsPassword()
	{
		return $this->usage_stats_password;
	}

	/**
	 * Get the [usage_stats_note] column value.
	 * 
	 * @return     string
	 */
	public function getUsageStatsNote()
	{
		return $this->usage_stats_note;
	}

	/**
	 * Get the [software_requirements] column value.
	 * 
	 * @return     string
	 */
	public function getSoftwareRequirements()
	{
		return $this->software_requirements;
	}

	/**
	 * Get the [system_status_uri] column value.
	 * 
	 * @return     string
	 */
	public function getSystemStatusUri()
	{
		return $this->system_status_uri;
	}

	/**
	 * Get the [product_advisory_note] column value.
	 * 
	 * @return     string
	 */
	public function getProductAdvisoryNote()
	{
		return $this->product_advisory_note;
	}

	/**
	 * Get the [training_info] column value.
	 * 
	 * @return     string
	 */
	public function getTrainingInfo()
	{
		return $this->training_info;
	}

	/**
	 * Get the [admin_doc_uri] column value.
	 * 
	 * @return     string
	 */
	public function getAdminDocUri()
	{
		return $this->admin_doc_uri;
	}

	/**
	 * Get the [user_doc_uri] column value.
	 * 
	 * @return     string
	 */
	public function getUserDocUri()
	{
		return $this->user_doc_uri;
	}

	/**
	 * Get the [note] column value.
	 * 
	 * @return     string
	 */
	public function getNote()
	{
		return $this->note;
	}

	/**
	 * Get the [optionally formatted] temporal [deleted_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDeletedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->deleted_at === null) {
			return null;
		}


		if ($this->deleted_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->deleted_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->deleted_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = AdminInfoPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [ui_config_available] column.
	 * 
	 * @param      boolean $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setUiConfigAvailable($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->ui_config_available !== $v) {
			$this->ui_config_available = $v;
			$this->modifiedColumns[] = AdminInfoPeer::UI_CONFIG_AVAILABLE;
		}

		return $this;
	} // setUiConfigAvailable()

	/**
	 * Set the value of [subscriber_branding_available] column.
	 * 
	 * @param      boolean $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setSubscriberBrandingAvailable($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->subscriber_branding_available !== $v) {
			$this->subscriber_branding_available = $v;
			$this->modifiedColumns[] = AdminInfoPeer::SUBSCRIBER_BRANDING_AVAILABLE;
		}

		return $this;
	} // setSubscriberBrandingAvailable()

	/**
	 * Set the value of [subscriber_branding_note] column.
	 * 
	 * @param      string $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setSubscriberBrandingNote($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->subscriber_branding_note !== $v) {
			$this->subscriber_branding_note = $v;
			$this->modifiedColumns[] = AdminInfoPeer::SUBSCRIBER_BRANDING_NOTE;
		}

		return $this;
	} // setSubscriberBrandingNote()

	/**
	 * Set the value of [personalized_features_available] column.
	 * 
	 * @param      boolean $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setPersonalizedFeaturesAvailable($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->personalized_features_available !== $v) {
			$this->personalized_features_available = $v;
			$this->modifiedColumns[] = AdminInfoPeer::PERSONALIZED_FEATURES_AVAILABLE;
		}

		return $this;
	} // setPersonalizedFeaturesAvailable()

	/**
	 * Set the value of [inbound_linking_available] column.
	 * 
	 * @param      boolean $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setInboundLinkingAvailable($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->inbound_linking_available !== $v) {
			$this->inbound_linking_available = $v;
			$this->modifiedColumns[] = AdminInfoPeer::INBOUND_LINKING_AVAILABLE;
		}

		return $this;
	} // setInboundLinkingAvailable()

	/**
	 * Set the value of [open_url_compliance_available] column.
	 * 
	 * @param      boolean $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setOpenUrlComplianceAvailable($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->open_url_compliance_available !== $v) {
			$this->open_url_compliance_available = $v;
			$this->modifiedColumns[] = AdminInfoPeer::OPEN_URL_COMPLIANCE_AVAILABLE;
		}

		return $this;
	} // setOpenUrlComplianceAvailable()

	/**
	 * Set the value of [linking_note] column.
	 * 
	 * @param      string $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setLinkingNote($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->linking_note !== $v) {
			$this->linking_note = $v;
			$this->modifiedColumns[] = AdminInfoPeer::LINKING_NOTE;
		}

		return $this;
	} // setLinkingNote()

	/**
	 * Set the value of [marc_records_available] column.
	 * 
	 * @param      boolean $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setMarcRecordsAvailable($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->marc_records_available !== $v) {
			$this->marc_records_available = $v;
			$this->modifiedColumns[] = AdminInfoPeer::MARC_RECORDS_AVAILABLE;
		}

		return $this;
	} // setMarcRecordsAvailable()

	/**
	 * Set the value of [marc_record_note] column.
	 * 
	 * @param      string $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setMarcRecordNote($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->marc_record_note !== $v) {
			$this->marc_record_note = $v;
			$this->modifiedColumns[] = AdminInfoPeer::MARC_RECORD_NOTE;
		}

		return $this;
	} // setMarcRecordNote()

	/**
	 * Set the value of [ss_360_search_available] column.
	 * 
	 * @param      boolean $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setSs360SearchAvailable($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->ss_360_search_available !== $v) {
			$this->ss_360_search_available = $v;
			$this->modifiedColumns[] = AdminInfoPeer::SS_360_SEARCH_AVAILABLE;
		}

		return $this;
	} // setSs360SearchAvailable()

	/**
	 * Set the value of [usage_stats_available] column.
	 * 
	 * @param      boolean $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setUsageStatsAvailable($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->usage_stats_available !== $v) {
			$this->usage_stats_available = $v;
			$this->modifiedColumns[] = AdminInfoPeer::USAGE_STATS_AVAILABLE;
		}

		return $this;
	} // setUsageStatsAvailable()

	/**
	 * Set the value of [usage_stats_standards_compliance] column.
	 * 
	 * @param      string $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setUsageStatsStandardsCompliance($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->usage_stats_standards_compliance !== $v) {
			$this->usage_stats_standards_compliance = $v;
			$this->modifiedColumns[] = AdminInfoPeer::USAGE_STATS_STANDARDS_COMPLIANCE;
		}

		return $this;
	} // setUsageStatsStandardsCompliance()

	/**
	 * Set the value of [usage_stats_delivery_id] column.
	 * 
	 * @param      int $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setUsageStatsDeliveryId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->usage_stats_delivery_id !== $v) {
			$this->usage_stats_delivery_id = $v;
			$this->modifiedColumns[] = AdminInfoPeer::USAGE_STATS_DELIVERY_ID;
		}

		if ($this->aInfoExchangeMethod !== null && $this->aInfoExchangeMethod->getId() !== $v) {
			$this->aInfoExchangeMethod = null;
		}

		return $this;
	} // setUsageStatsDeliveryId()

	/**
	 * Set the value of [usage_stats_format_id] column.
	 * 
	 * @param      int $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setUsageStatsFormatId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->usage_stats_format_id !== $v) {
			$this->usage_stats_format_id = $v;
			$this->modifiedColumns[] = AdminInfoPeer::USAGE_STATS_FORMAT_ID;
		}

		if ($this->aUsageStatsFormat !== null && $this->aUsageStatsFormat->getId() !== $v) {
			$this->aUsageStatsFormat = null;
		}

		return $this;
	} // setUsageStatsFormatId()

	/**
	 * Set the value of [usage_stats_freq_id] column.
	 * 
	 * @param      int $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setUsageStatsFreqId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->usage_stats_freq_id !== $v) {
			$this->usage_stats_freq_id = $v;
			$this->modifiedColumns[] = AdminInfoPeer::USAGE_STATS_FREQ_ID;
		}

		if ($this->aUsageStatsFreq !== null && $this->aUsageStatsFreq->getId() !== $v) {
			$this->aUsageStatsFreq = null;
		}

		return $this;
	} // setUsageStatsFreqId()

	/**
	 * Set the value of [usage_stats_uri] column.
	 * 
	 * @param      string $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setUsageStatsUri($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->usage_stats_uri !== $v) {
			$this->usage_stats_uri = $v;
			$this->modifiedColumns[] = AdminInfoPeer::USAGE_STATS_URI;
		}

		return $this;
	} // setUsageStatsUri()

	/**
	 * Set the value of [usage_stats_username] column.
	 * 
	 * @param      string $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setUsageStatsUsername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->usage_stats_username !== $v) {
			$this->usage_stats_username = $v;
			$this->modifiedColumns[] = AdminInfoPeer::USAGE_STATS_USERNAME;
		}

		return $this;
	} // setUsageStatsUsername()

	/**
	 * Set the value of [usage_stats_password] column.
	 * 
	 * @param      string $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setUsageStatsPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->usage_stats_password !== $v) {
			$this->usage_stats_password = $v;
			$this->modifiedColumns[] = AdminInfoPeer::USAGE_STATS_PASSWORD;
		}

		return $this;
	} // setUsageStatsPassword()

	/**
	 * Set the value of [usage_stats_note] column.
	 * 
	 * @param      string $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setUsageStatsNote($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->usage_stats_note !== $v) {
			$this->usage_stats_note = $v;
			$this->modifiedColumns[] = AdminInfoPeer::USAGE_STATS_NOTE;
		}

		return $this;
	} // setUsageStatsNote()

	/**
	 * Set the value of [software_requirements] column.
	 * 
	 * @param      string $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setSoftwareRequirements($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->software_requirements !== $v) {
			$this->software_requirements = $v;
			$this->modifiedColumns[] = AdminInfoPeer::SOFTWARE_REQUIREMENTS;
		}

		return $this;
	} // setSoftwareRequirements()

	/**
	 * Set the value of [system_status_uri] column.
	 * 
	 * @param      string $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setSystemStatusUri($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->system_status_uri !== $v) {
			$this->system_status_uri = $v;
			$this->modifiedColumns[] = AdminInfoPeer::SYSTEM_STATUS_URI;
		}

		return $this;
	} // setSystemStatusUri()

	/**
	 * Set the value of [product_advisory_note] column.
	 * 
	 * @param      string $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setProductAdvisoryNote($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->product_advisory_note !== $v) {
			$this->product_advisory_note = $v;
			$this->modifiedColumns[] = AdminInfoPeer::PRODUCT_ADVISORY_NOTE;
		}

		return $this;
	} // setProductAdvisoryNote()

	/**
	 * Set the value of [training_info] column.
	 * 
	 * @param      string $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setTrainingInfo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->training_info !== $v) {
			$this->training_info = $v;
			$this->modifiedColumns[] = AdminInfoPeer::TRAINING_INFO;
		}

		return $this;
	} // setTrainingInfo()

	/**
	 * Set the value of [admin_doc_uri] column.
	 * 
	 * @param      string $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setAdminDocUri($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->admin_doc_uri !== $v) {
			$this->admin_doc_uri = $v;
			$this->modifiedColumns[] = AdminInfoPeer::ADMIN_DOC_URI;
		}

		return $this;
	} // setAdminDocUri()

	/**
	 * Set the value of [user_doc_uri] column.
	 * 
	 * @param      string $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setUserDocUri($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->user_doc_uri !== $v) {
			$this->user_doc_uri = $v;
			$this->modifiedColumns[] = AdminInfoPeer::USER_DOC_URI;
		}

		return $this;
	} // setUserDocUri()

	/**
	 * Set the value of [note] column.
	 * 
	 * @param      string $v new value
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setNote($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->note !== $v) {
			$this->note = $v;
			$this->modifiedColumns[] = AdminInfoPeer::NOTE;
		}

		return $this;
	} // setNote()

	/**
	 * Sets the value of [deleted_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     AdminInfo The current object (for fluent API support)
	 */
	public function setDeletedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->deleted_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->deleted_at !== null && $tmpDt = new DateTime($this->deleted_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->deleted_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = AdminInfoPeer::DELETED_AT;
			}
		} // if either are not null

		return $this;
	} // setDeletedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->ui_config_available = ($row[$startcol + 1] !== null) ? (boolean) $row[$startcol + 1] : null;
			$this->subscriber_branding_available = ($row[$startcol + 2] !== null) ? (boolean) $row[$startcol + 2] : null;
			$this->subscriber_branding_note = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->personalized_features_available = ($row[$startcol + 4] !== null) ? (boolean) $row[$startcol + 4] : null;
			$this->inbound_linking_available = ($row[$startcol + 5] !== null) ? (boolean) $row[$startcol + 5] : null;
			$this->open_url_compliance_available = ($row[$startcol + 6] !== null) ? (boolean) $row[$startcol + 6] : null;
			$this->linking_note = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->marc_records_available = ($row[$startcol + 8] !== null) ? (boolean) $row[$startcol + 8] : null;
			$this->marc_record_note = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->ss_360_search_available = ($row[$startcol + 10] !== null) ? (boolean) $row[$startcol + 10] : null;
			$this->usage_stats_available = ($row[$startcol + 11] !== null) ? (boolean) $row[$startcol + 11] : null;
			$this->usage_stats_standards_compliance = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->usage_stats_delivery_id = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->usage_stats_format_id = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->usage_stats_freq_id = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->usage_stats_uri = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->usage_stats_username = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->usage_stats_password = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->usage_stats_note = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->software_requirements = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->system_status_uri = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->product_advisory_note = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->training_info = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->admin_doc_uri = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->user_doc_uri = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->note = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->deleted_at = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 28; // 28 = AdminInfoPeer::NUM_COLUMNS - AdminInfoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating AdminInfo object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aInfoExchangeMethod !== null && $this->usage_stats_delivery_id !== $this->aInfoExchangeMethod->getId()) {
			$this->aInfoExchangeMethod = null;
		}
		if ($this->aUsageStatsFormat !== null && $this->usage_stats_format_id !== $this->aUsageStatsFormat->getId()) {
			$this->aUsageStatsFormat = null;
		}
		if ($this->aUsageStatsFreq !== null && $this->usage_stats_freq_id !== $this->aUsageStatsFreq->getId()) {
			$this->aUsageStatsFreq = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AdminInfoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = AdminInfoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aInfoExchangeMethod = null;
			$this->aUsageStatsFormat = null;
			$this->aUsageStatsFreq = null;
			$this->collEResources = null;
			$this->lastEResourceCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseAdminInfo:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AdminInfoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			AdminInfoPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseAdminInfo:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseAdminInfo:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AdminInfoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseAdminInfo:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			AdminInfoPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aInfoExchangeMethod !== null) {
				if ($this->aInfoExchangeMethod->isModified() || $this->aInfoExchangeMethod->isNew()) {
					$affectedRows += $this->aInfoExchangeMethod->save($con);
				}
				$this->setInfoExchangeMethod($this->aInfoExchangeMethod);
			}

			if ($this->aUsageStatsFormat !== null) {
				if ($this->aUsageStatsFormat->isModified() || $this->aUsageStatsFormat->isNew()) {
					$affectedRows += $this->aUsageStatsFormat->save($con);
				}
				$this->setUsageStatsFormat($this->aUsageStatsFormat);
			}

			if ($this->aUsageStatsFreq !== null) {
				if ($this->aUsageStatsFreq->isModified() || $this->aUsageStatsFreq->isNew()) {
					$affectedRows += $this->aUsageStatsFreq->save($con);
				}
				$this->setUsageStatsFreq($this->aUsageStatsFreq);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = AdminInfoPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = AdminInfoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += AdminInfoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collEResources !== null) {
				foreach ($this->collEResources as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aInfoExchangeMethod !== null) {
				if (!$this->aInfoExchangeMethod->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aInfoExchangeMethod->getValidationFailures());
				}
			}

			if ($this->aUsageStatsFormat !== null) {
				if (!$this->aUsageStatsFormat->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUsageStatsFormat->getValidationFailures());
				}
			}

			if ($this->aUsageStatsFreq !== null) {
				if (!$this->aUsageStatsFreq->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUsageStatsFreq->getValidationFailures());
				}
			}


			if (($retval = AdminInfoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collEResources !== null) {
					foreach ($this->collEResources as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AdminInfoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getUiConfigAvailable();
				break;
			case 2:
				return $this->getSubscriberBrandingAvailable();
				break;
			case 3:
				return $this->getSubscriberBrandingNote();
				break;
			case 4:
				return $this->getPersonalizedFeaturesAvailable();
				break;
			case 5:
				return $this->getInboundLinkingAvailable();
				break;
			case 6:
				return $this->getOpenUrlComplianceAvailable();
				break;
			case 7:
				return $this->getLinkingNote();
				break;
			case 8:
				return $this->getMarcRecordsAvailable();
				break;
			case 9:
				return $this->getMarcRecordNote();
				break;
			case 10:
				return $this->getSs360SearchAvailable();
				break;
			case 11:
				return $this->getUsageStatsAvailable();
				break;
			case 12:
				return $this->getUsageStatsStandardsCompliance();
				break;
			case 13:
				return $this->getUsageStatsDeliveryId();
				break;
			case 14:
				return $this->getUsageStatsFormatId();
				break;
			case 15:
				return $this->getUsageStatsFreqId();
				break;
			case 16:
				return $this->getUsageStatsUri();
				break;
			case 17:
				return $this->getUsageStatsUsername();
				break;
			case 18:
				return $this->getUsageStatsPassword();
				break;
			case 19:
				return $this->getUsageStatsNote();
				break;
			case 20:
				return $this->getSoftwareRequirements();
				break;
			case 21:
				return $this->getSystemStatusUri();
				break;
			case 22:
				return $this->getProductAdvisoryNote();
				break;
			case 23:
				return $this->getTrainingInfo();
				break;
			case 24:
				return $this->getAdminDocUri();
				break;
			case 25:
				return $this->getUserDocUri();
				break;
			case 26:
				return $this->getNote();
				break;
			case 27:
				return $this->getDeletedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = AdminInfoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getUiConfigAvailable(),
			$keys[2] => $this->getSubscriberBrandingAvailable(),
			$keys[3] => $this->getSubscriberBrandingNote(),
			$keys[4] => $this->getPersonalizedFeaturesAvailable(),
			$keys[5] => $this->getInboundLinkingAvailable(),
			$keys[6] => $this->getOpenUrlComplianceAvailable(),
			$keys[7] => $this->getLinkingNote(),
			$keys[8] => $this->getMarcRecordsAvailable(),
			$keys[9] => $this->getMarcRecordNote(),
			$keys[10] => $this->getSs360SearchAvailable(),
			$keys[11] => $this->getUsageStatsAvailable(),
			$keys[12] => $this->getUsageStatsStandardsCompliance(),
			$keys[13] => $this->getUsageStatsDeliveryId(),
			$keys[14] => $this->getUsageStatsFormatId(),
			$keys[15] => $this->getUsageStatsFreqId(),
			$keys[16] => $this->getUsageStatsUri(),
			$keys[17] => $this->getUsageStatsUsername(),
			$keys[18] => $this->getUsageStatsPassword(),
			$keys[19] => $this->getUsageStatsNote(),
			$keys[20] => $this->getSoftwareRequirements(),
			$keys[21] => $this->getSystemStatusUri(),
			$keys[22] => $this->getProductAdvisoryNote(),
			$keys[23] => $this->getTrainingInfo(),
			$keys[24] => $this->getAdminDocUri(),
			$keys[25] => $this->getUserDocUri(),
			$keys[26] => $this->getNote(),
			$keys[27] => $this->getDeletedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AdminInfoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setUiConfigAvailable($value);
				break;
			case 2:
				$this->setSubscriberBrandingAvailable($value);
				break;
			case 3:
				$this->setSubscriberBrandingNote($value);
				break;
			case 4:
				$this->setPersonalizedFeaturesAvailable($value);
				break;
			case 5:
				$this->setInboundLinkingAvailable($value);
				break;
			case 6:
				$this->setOpenUrlComplianceAvailable($value);
				break;
			case 7:
				$this->setLinkingNote($value);
				break;
			case 8:
				$this->setMarcRecordsAvailable($value);
				break;
			case 9:
				$this->setMarcRecordNote($value);
				break;
			case 10:
				$this->setSs360SearchAvailable($value);
				break;
			case 11:
				$this->setUsageStatsAvailable($value);
				break;
			case 12:
				$this->setUsageStatsStandardsCompliance($value);
				break;
			case 13:
				$this->setUsageStatsDeliveryId($value);
				break;
			case 14:
				$this->setUsageStatsFormatId($value);
				break;
			case 15:
				$this->setUsageStatsFreqId($value);
				break;
			case 16:
				$this->setUsageStatsUri($value);
				break;
			case 17:
				$this->setUsageStatsUsername($value);
				break;
			case 18:
				$this->setUsageStatsPassword($value);
				break;
			case 19:
				$this->setUsageStatsNote($value);
				break;
			case 20:
				$this->setSoftwareRequirements($value);
				break;
			case 21:
				$this->setSystemStatusUri($value);
				break;
			case 22:
				$this->setProductAdvisoryNote($value);
				break;
			case 23:
				$this->setTrainingInfo($value);
				break;
			case 24:
				$this->setAdminDocUri($value);
				break;
			case 25:
				$this->setUserDocUri($value);
				break;
			case 26:
				$this->setNote($value);
				break;
			case 27:
				$this->setDeletedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = AdminInfoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setUiConfigAvailable($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setSubscriberBrandingAvailable($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setSubscriberBrandingNote($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setPersonalizedFeaturesAvailable($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setInboundLinkingAvailable($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setOpenUrlComplianceAvailable($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setLinkingNote($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setMarcRecordsAvailable($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setMarcRecordNote($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setSs360SearchAvailable($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setUsageStatsAvailable($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setUsageStatsStandardsCompliance($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setUsageStatsDeliveryId($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setUsageStatsFormatId($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setUsageStatsFreqId($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setUsageStatsUri($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setUsageStatsUsername($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setUsageStatsPassword($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setUsageStatsNote($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setSoftwareRequirements($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setSystemStatusUri($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setProductAdvisoryNote($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setTrainingInfo($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setAdminDocUri($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setUserDocUri($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setNote($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setDeletedAt($arr[$keys[27]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(AdminInfoPeer::DATABASE_NAME);

		if ($this->isColumnModified(AdminInfoPeer::ID)) $criteria->add(AdminInfoPeer::ID, $this->id);
		if ($this->isColumnModified(AdminInfoPeer::UI_CONFIG_AVAILABLE)) $criteria->add(AdminInfoPeer::UI_CONFIG_AVAILABLE, $this->ui_config_available);
		if ($this->isColumnModified(AdminInfoPeer::SUBSCRIBER_BRANDING_AVAILABLE)) $criteria->add(AdminInfoPeer::SUBSCRIBER_BRANDING_AVAILABLE, $this->subscriber_branding_available);
		if ($this->isColumnModified(AdminInfoPeer::SUBSCRIBER_BRANDING_NOTE)) $criteria->add(AdminInfoPeer::SUBSCRIBER_BRANDING_NOTE, $this->subscriber_branding_note);
		if ($this->isColumnModified(AdminInfoPeer::PERSONALIZED_FEATURES_AVAILABLE)) $criteria->add(AdminInfoPeer::PERSONALIZED_FEATURES_AVAILABLE, $this->personalized_features_available);
		if ($this->isColumnModified(AdminInfoPeer::INBOUND_LINKING_AVAILABLE)) $criteria->add(AdminInfoPeer::INBOUND_LINKING_AVAILABLE, $this->inbound_linking_available);
		if ($this->isColumnModified(AdminInfoPeer::OPEN_URL_COMPLIANCE_AVAILABLE)) $criteria->add(AdminInfoPeer::OPEN_URL_COMPLIANCE_AVAILABLE, $this->open_url_compliance_available);
		if ($this->isColumnModified(AdminInfoPeer::LINKING_NOTE)) $criteria->add(AdminInfoPeer::LINKING_NOTE, $this->linking_note);
		if ($this->isColumnModified(AdminInfoPeer::MARC_RECORDS_AVAILABLE)) $criteria->add(AdminInfoPeer::MARC_RECORDS_AVAILABLE, $this->marc_records_available);
		if ($this->isColumnModified(AdminInfoPeer::MARC_RECORD_NOTE)) $criteria->add(AdminInfoPeer::MARC_RECORD_NOTE, $this->marc_record_note);
		if ($this->isColumnModified(AdminInfoPeer::SS_360_SEARCH_AVAILABLE)) $criteria->add(AdminInfoPeer::SS_360_SEARCH_AVAILABLE, $this->ss_360_search_available);
		if ($this->isColumnModified(AdminInfoPeer::USAGE_STATS_AVAILABLE)) $criteria->add(AdminInfoPeer::USAGE_STATS_AVAILABLE, $this->usage_stats_available);
		if ($this->isColumnModified(AdminInfoPeer::USAGE_STATS_STANDARDS_COMPLIANCE)) $criteria->add(AdminInfoPeer::USAGE_STATS_STANDARDS_COMPLIANCE, $this->usage_stats_standards_compliance);
		if ($this->isColumnModified(AdminInfoPeer::USAGE_STATS_DELIVERY_ID)) $criteria->add(AdminInfoPeer::USAGE_STATS_DELIVERY_ID, $this->usage_stats_delivery_id);
		if ($this->isColumnModified(AdminInfoPeer::USAGE_STATS_FORMAT_ID)) $criteria->add(AdminInfoPeer::USAGE_STATS_FORMAT_ID, $this->usage_stats_format_id);
		if ($this->isColumnModified(AdminInfoPeer::USAGE_STATS_FREQ_ID)) $criteria->add(AdminInfoPeer::USAGE_STATS_FREQ_ID, $this->usage_stats_freq_id);
		if ($this->isColumnModified(AdminInfoPeer::USAGE_STATS_URI)) $criteria->add(AdminInfoPeer::USAGE_STATS_URI, $this->usage_stats_uri);
		if ($this->isColumnModified(AdminInfoPeer::USAGE_STATS_USERNAME)) $criteria->add(AdminInfoPeer::USAGE_STATS_USERNAME, $this->usage_stats_username);
		if ($this->isColumnModified(AdminInfoPeer::USAGE_STATS_PASSWORD)) $criteria->add(AdminInfoPeer::USAGE_STATS_PASSWORD, $this->usage_stats_password);
		if ($this->isColumnModified(AdminInfoPeer::USAGE_STATS_NOTE)) $criteria->add(AdminInfoPeer::USAGE_STATS_NOTE, $this->usage_stats_note);
		if ($this->isColumnModified(AdminInfoPeer::SOFTWARE_REQUIREMENTS)) $criteria->add(AdminInfoPeer::SOFTWARE_REQUIREMENTS, $this->software_requirements);
		if ($this->isColumnModified(AdminInfoPeer::SYSTEM_STATUS_URI)) $criteria->add(AdminInfoPeer::SYSTEM_STATUS_URI, $this->system_status_uri);
		if ($this->isColumnModified(AdminInfoPeer::PRODUCT_ADVISORY_NOTE)) $criteria->add(AdminInfoPeer::PRODUCT_ADVISORY_NOTE, $this->product_advisory_note);
		if ($this->isColumnModified(AdminInfoPeer::TRAINING_INFO)) $criteria->add(AdminInfoPeer::TRAINING_INFO, $this->training_info);
		if ($this->isColumnModified(AdminInfoPeer::ADMIN_DOC_URI)) $criteria->add(AdminInfoPeer::ADMIN_DOC_URI, $this->admin_doc_uri);
		if ($this->isColumnModified(AdminInfoPeer::USER_DOC_URI)) $criteria->add(AdminInfoPeer::USER_DOC_URI, $this->user_doc_uri);
		if ($this->isColumnModified(AdminInfoPeer::NOTE)) $criteria->add(AdminInfoPeer::NOTE, $this->note);
		if ($this->isColumnModified(AdminInfoPeer::DELETED_AT)) $criteria->add(AdminInfoPeer::DELETED_AT, $this->deleted_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(AdminInfoPeer::DATABASE_NAME);

		$criteria->add(AdminInfoPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of AdminInfo (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setUiConfigAvailable($this->ui_config_available);

		$copyObj->setSubscriberBrandingAvailable($this->subscriber_branding_available);

		$copyObj->setSubscriberBrandingNote($this->subscriber_branding_note);

		$copyObj->setPersonalizedFeaturesAvailable($this->personalized_features_available);

		$copyObj->setInboundLinkingAvailable($this->inbound_linking_available);

		$copyObj->setOpenUrlComplianceAvailable($this->open_url_compliance_available);

		$copyObj->setLinkingNote($this->linking_note);

		$copyObj->setMarcRecordsAvailable($this->marc_records_available);

		$copyObj->setMarcRecordNote($this->marc_record_note);

		$copyObj->setSs360SearchAvailable($this->ss_360_search_available);

		$copyObj->setUsageStatsAvailable($this->usage_stats_available);

		$copyObj->setUsageStatsStandardsCompliance($this->usage_stats_standards_compliance);

		$copyObj->setUsageStatsDeliveryId($this->usage_stats_delivery_id);

		$copyObj->setUsageStatsFormatId($this->usage_stats_format_id);

		$copyObj->setUsageStatsFreqId($this->usage_stats_freq_id);

		$copyObj->setUsageStatsUri($this->usage_stats_uri);

		$copyObj->setUsageStatsUsername($this->usage_stats_username);

		$copyObj->setUsageStatsPassword($this->usage_stats_password);

		$copyObj->setUsageStatsNote($this->usage_stats_note);

		$copyObj->setSoftwareRequirements($this->software_requirements);

		$copyObj->setSystemStatusUri($this->system_status_uri);

		$copyObj->setProductAdvisoryNote($this->product_advisory_note);

		$copyObj->setTrainingInfo($this->training_info);

		$copyObj->setAdminDocUri($this->admin_doc_uri);

		$copyObj->setUserDocUri($this->user_doc_uri);

		$copyObj->setNote($this->note);

		$copyObj->setDeletedAt($this->deleted_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getEResources() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEResource($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     AdminInfo Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     AdminInfoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new AdminInfoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a InfoExchangeMethod object.
	 *
	 * @param      InfoExchangeMethod $v
	 * @return     AdminInfo The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setInfoExchangeMethod(InfoExchangeMethod $v = null)
	{
		if ($v === null) {
			$this->setUsageStatsDeliveryId(NULL);
		} else {
			$this->setUsageStatsDeliveryId($v->getId());
		}

		$this->aInfoExchangeMethod = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the InfoExchangeMethod object, it will not be re-added.
		if ($v !== null) {
			$v->addAdminInfo($this);
		}

		return $this;
	}


	/**
	 * Get the associated InfoExchangeMethod object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     InfoExchangeMethod The associated InfoExchangeMethod object.
	 * @throws     PropelException
	 */
	public function getInfoExchangeMethod(PropelPDO $con = null)
	{
		if ($this->aInfoExchangeMethod === null && ($this->usage_stats_delivery_id !== null)) {
			$c = new Criteria(InfoExchangeMethodPeer::DATABASE_NAME);
			$c->add(InfoExchangeMethodPeer::ID, $this->usage_stats_delivery_id);
			$this->aInfoExchangeMethod = InfoExchangeMethodPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aInfoExchangeMethod->addAdminInfos($this);
			 */
		}
		return $this->aInfoExchangeMethod;
	}

	/**
	 * Declares an association between this object and a UsageStatsFormat object.
	 *
	 * @param      UsageStatsFormat $v
	 * @return     AdminInfo The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUsageStatsFormat(UsageStatsFormat $v = null)
	{
		if ($v === null) {
			$this->setUsageStatsFormatId(NULL);
		} else {
			$this->setUsageStatsFormatId($v->getId());
		}

		$this->aUsageStatsFormat = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the UsageStatsFormat object, it will not be re-added.
		if ($v !== null) {
			$v->addAdminInfo($this);
		}

		return $this;
	}


	/**
	 * Get the associated UsageStatsFormat object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     UsageStatsFormat The associated UsageStatsFormat object.
	 * @throws     PropelException
	 */
	public function getUsageStatsFormat(PropelPDO $con = null)
	{
		if ($this->aUsageStatsFormat === null && ($this->usage_stats_format_id !== null)) {
			$c = new Criteria(UsageStatsFormatPeer::DATABASE_NAME);
			$c->add(UsageStatsFormatPeer::ID, $this->usage_stats_format_id);
			$this->aUsageStatsFormat = UsageStatsFormatPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUsageStatsFormat->addAdminInfos($this);
			 */
		}
		return $this->aUsageStatsFormat;
	}

	/**
	 * Declares an association between this object and a UsageStatsFreq object.
	 *
	 * @param      UsageStatsFreq $v
	 * @return     AdminInfo The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUsageStatsFreq(UsageStatsFreq $v = null)
	{
		if ($v === null) {
			$this->setUsageStatsFreqId(NULL);
		} else {
			$this->setUsageStatsFreqId($v->getId());
		}

		$this->aUsageStatsFreq = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the UsageStatsFreq object, it will not be re-added.
		if ($v !== null) {
			$v->addAdminInfo($this);
		}

		return $this;
	}


	/**
	 * Get the associated UsageStatsFreq object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     UsageStatsFreq The associated UsageStatsFreq object.
	 * @throws     PropelException
	 */
	public function getUsageStatsFreq(PropelPDO $con = null)
	{
		if ($this->aUsageStatsFreq === null && ($this->usage_stats_freq_id !== null)) {
			$c = new Criteria(UsageStatsFreqPeer::DATABASE_NAME);
			$c->add(UsageStatsFreqPeer::ID, $this->usage_stats_freq_id);
			$this->aUsageStatsFreq = UsageStatsFreqPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUsageStatsFreq->addAdminInfos($this);
			 */
		}
		return $this->aUsageStatsFreq;
	}

	/**
	 * Clears out the collEResources collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEResources()
	 */
	public function clearEResources()
	{
		$this->collEResources = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEResources collection (array).
	 *
	 * By default this just sets the collEResources collection to an empty array (like clearcollEResources());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEResources()
	{
		$this->collEResources = array();
	}

	/**
	 * Gets an array of EResource objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AdminInfo has previously been saved, it will retrieve
	 * related EResources from storage. If this AdminInfo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EResource[]
	 * @throws     PropelException
	 */
	public function getEResources($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AdminInfoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEResources === null) {
			if ($this->isNew()) {
			   $this->collEResources = array();
			} else {

				$criteria->add(EResourcePeer::ADMIN_INFO_ID, $this->id);

				EResourcePeer::addSelectColumns($criteria);
				$this->collEResources = EResourcePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EResourcePeer::ADMIN_INFO_ID, $this->id);

				EResourcePeer::addSelectColumns($criteria);
				if (!isset($this->lastEResourceCriteria) || !$this->lastEResourceCriteria->equals($criteria)) {
					$this->collEResources = EResourcePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEResourceCriteria = $criteria;
		return $this->collEResources;
	}

	/**
	 * Returns the number of related EResource objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EResource objects.
	 * @throws     PropelException
	 */
	public function countEResources(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AdminInfoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEResources === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EResourcePeer::ADMIN_INFO_ID, $this->id);

				$count = EResourcePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EResourcePeer::ADMIN_INFO_ID, $this->id);

				if (!isset($this->lastEResourceCriteria) || !$this->lastEResourceCriteria->equals($criteria)) {
					$count = EResourcePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEResources);
				}
			} else {
				$count = count($this->collEResources);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EResource object to this object
	 * through the EResource foreign key attribute.
	 *
	 * @param      EResource $l EResource
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEResource(EResource $l)
	{
		if ($this->collEResources === null) {
			$this->initEResources();
		}
		if (!in_array($l, $this->collEResources, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEResources, $l);
			$l->setAdminInfo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AdminInfo is new, it will return
	 * an empty collection; or if this AdminInfo has previously
	 * been saved, it will retrieve related EResources from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AdminInfo.
	 */
	public function getEResourcesJoinAcquisition($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AdminInfoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEResources === null) {
			if ($this->isNew()) {
				$this->collEResources = array();
			} else {

				$criteria->add(EResourcePeer::ADMIN_INFO_ID, $this->id);

				$this->collEResources = EResourcePeer::doSelectJoinAcquisition($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EResourcePeer::ADMIN_INFO_ID, $this->id);

			if (!isset($this->lastEResourceCriteria) || !$this->lastEResourceCriteria->equals($criteria)) {
				$this->collEResources = EResourcePeer::doSelectJoinAcquisition($criteria, $con, $join_behavior);
			}
		}
		$this->lastEResourceCriteria = $criteria;

		return $this->collEResources;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AdminInfo is new, it will return
	 * an empty collection; or if this AdminInfo has previously
	 * been saved, it will retrieve related EResources from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AdminInfo.
	 */
	public function getEResourcesJoinAccessInfo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AdminInfoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEResources === null) {
			if ($this->isNew()) {
				$this->collEResources = array();
			} else {

				$criteria->add(EResourcePeer::ADMIN_INFO_ID, $this->id);

				$this->collEResources = EResourcePeer::doSelectJoinAccessInfo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EResourcePeer::ADMIN_INFO_ID, $this->id);

			if (!isset($this->lastEResourceCriteria) || !$this->lastEResourceCriteria->equals($criteria)) {
				$this->collEResources = EResourcePeer::doSelectJoinAccessInfo($criteria, $con, $join_behavior);
			}
		}
		$this->lastEResourceCriteria = $criteria;

		return $this->collEResources;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collEResources) {
				foreach ((array) $this->collEResources as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collEResources = null;
			$this->aInfoExchangeMethod = null;
			$this->aUsageStatsFormat = null;
			$this->aUsageStatsFreq = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseAdminInfo:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseAdminInfo::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseAdminInfo
