<?php

/**
 * Base class that represents a row from the 'eresources' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Wed May 12 11:53:26 2010
 *
 * @package    lib.model.om
 */
abstract class BaseEResource extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        EResourcePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the alt_id field.
	 * @var        string
	 */
	protected $alt_id;

	/**
	 * The value for the subscription_number field.
	 * @var        string
	 */
	protected $subscription_number;

	/**
	 * The value for the title field.
	 * @var        string
	 */
	protected $title;

	/**
	 * The value for the sort_title field.
	 * @var        string
	 */
	protected $sort_title;

	/**
	 * The value for the alt_title field.
	 * @var        string
	 */
	protected $alt_title;

	/**
	 * The value for the language field.
	 * Note: this column has a database default value of: 'eng'
	 * @var        string
	 */
	protected $language;

	/**
	 * The value for the description field.
	 * @var        string
	 */
	protected $description;

	/**
	 * The value for the public_note field.
	 * @var        string
	 */
	protected $public_note;

	/**
	 * The value for the suppression field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $suppression;

	/**
	 * The value for the product_unavailable field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $product_unavailable;

	/**
	 * The value for the acq_id field.
	 * @var        int
	 */
	protected $acq_id;

	/**
	 * The value for the access_info_id field.
	 * @var        int
	 */
	protected $access_info_id;

	/**
	 * The value for the admin_info_id field.
	 * @var        int
	 */
	protected $admin_info_id;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the deleted_at field.
	 * @var        string
	 */
	protected $deleted_at;

	/**
	 * @var        Acquisition
	 */
	protected $aAcquisition;

	/**
	 * @var        AccessInfo
	 */
	protected $aAccessInfo;

	/**
	 * @var        AdminInfo
	 */
	protected $aAdminInfo;

	/**
	 * @var        array EResourceDbSubjectAssoc[] Collection to store aggregation of EResourceDbSubjectAssoc objects.
	 */
	protected $collEResourceDbSubjectAssocs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEResourceDbSubjectAssocs.
	 */
	private $lastEResourceDbSubjectAssocCriteria = null;

	/**
	 * @var        array UsageAttempt[] Collection to store aggregation of UsageAttempt objects.
	 */
	protected $collUsageAttempts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUsageAttempts.
	 */
	private $lastUsageAttemptCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'EResourcePeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->language = 'eng';
		$this->suppression = false;
		$this->product_unavailable = false;
	}

	/**
	 * Initializes internal state of BaseEResource object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [alt_id] column value.
	 * 
	 * @return     string
	 */
	public function getAltId()
	{
		return $this->alt_id;
	}

	/**
	 * Get the [subscription_number] column value.
	 * 
	 * @return     string
	 */
	public function getSubscriptionNumber()
	{
		return $this->subscription_number;
	}

	/**
	 * Get the [title] column value.
	 * 
	 * @return     string
	 */
	public function getTitle()
	{
		return $this->title;
	}

	/**
	 * Get the [sort_title] column value.
	 * 
	 * @return     string
	 */
	public function getSortTitle()
	{
		return $this->sort_title;
	}

	/**
	 * Get the [alt_title] column value.
	 * 
	 * @return     string
	 */
	public function getAltTitle()
	{
		return $this->alt_title;
	}

	/**
	 * Get the [language] column value.
	 * 
	 * @return     string
	 */
	public function getLanguage()
	{
		return $this->language;
	}

	/**
	 * Get the [description] column value.
	 * 
	 * @return     string
	 */
	public function getDescription()
	{
		return $this->description;
	}

	/**
	 * Get the [public_note] column value.
	 * 
	 * @return     string
	 */
	public function getPublicNote()
	{
		return $this->public_note;
	}

	/**
	 * Get the [suppression] column value.
	 * 
	 * @return     boolean
	 */
	public function getSuppression()
	{
		return $this->suppression;
	}

	/**
	 * Get the [product_unavailable] column value.
	 * 
	 * @return     boolean
	 */
	public function getProductUnavailable()
	{
		return $this->product_unavailable;
	}

	/**
	 * Get the [acq_id] column value.
	 * 
	 * @return     int
	 */
	public function getAcqId()
	{
		return $this->acq_id;
	}

	/**
	 * Get the [access_info_id] column value.
	 * 
	 * @return     int
	 */
	public function getAccessInfoId()
	{
		return $this->access_info_id;
	}

	/**
	 * Get the [admin_info_id] column value.
	 * 
	 * @return     int
	 */
	public function getAdminInfoId()
	{
		return $this->admin_info_id;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [deleted_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDeletedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->deleted_at === null) {
			return null;
		}


		if ($this->deleted_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->deleted_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->deleted_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = EResourcePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [alt_id] column.
	 * 
	 * @param      string $v new value
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setAltId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->alt_id !== $v) {
			$this->alt_id = $v;
			$this->modifiedColumns[] = EResourcePeer::ALT_ID;
		}

		return $this;
	} // setAltId()

	/**
	 * Set the value of [subscription_number] column.
	 * 
	 * @param      string $v new value
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setSubscriptionNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->subscription_number !== $v) {
			$this->subscription_number = $v;
			$this->modifiedColumns[] = EResourcePeer::SUBSCRIPTION_NUMBER;
		}

		return $this;
	} // setSubscriptionNumber()

	/**
	 * Set the value of [title] column.
	 * 
	 * @param      string $v new value
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->title !== $v) {
			$this->title = $v;
			$this->modifiedColumns[] = EResourcePeer::TITLE;
		}

		return $this;
	} // setTitle()

	/**
	 * Set the value of [sort_title] column.
	 * 
	 * @param      string $v new value
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setSortTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sort_title !== $v) {
			$this->sort_title = $v;
			$this->modifiedColumns[] = EResourcePeer::SORT_TITLE;
		}

		return $this;
	} // setSortTitle()

	/**
	 * Set the value of [alt_title] column.
	 * 
	 * @param      string $v new value
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setAltTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->alt_title !== $v) {
			$this->alt_title = $v;
			$this->modifiedColumns[] = EResourcePeer::ALT_TITLE;
		}

		return $this;
	} // setAltTitle()

	/**
	 * Set the value of [language] column.
	 * 
	 * @param      string $v new value
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setLanguage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->language !== $v || $this->isNew()) {
			$this->language = $v;
			$this->modifiedColumns[] = EResourcePeer::LANGUAGE;
		}

		return $this;
	} // setLanguage()

	/**
	 * Set the value of [description] column.
	 * 
	 * @param      string $v new value
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setDescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->description !== $v) {
			$this->description = $v;
			$this->modifiedColumns[] = EResourcePeer::DESCRIPTION;
		}

		return $this;
	} // setDescription()

	/**
	 * Set the value of [public_note] column.
	 * 
	 * @param      string $v new value
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setPublicNote($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->public_note !== $v) {
			$this->public_note = $v;
			$this->modifiedColumns[] = EResourcePeer::PUBLIC_NOTE;
		}

		return $this;
	} // setPublicNote()

	/**
	 * Set the value of [suppression] column.
	 * 
	 * @param      boolean $v new value
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setSuppression($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->suppression !== $v || $this->isNew()) {
			$this->suppression = $v;
			$this->modifiedColumns[] = EResourcePeer::SUPPRESSION;
		}

		return $this;
	} // setSuppression()

	/**
	 * Set the value of [product_unavailable] column.
	 * 
	 * @param      boolean $v new value
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setProductUnavailable($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->product_unavailable !== $v || $this->isNew()) {
			$this->product_unavailable = $v;
			$this->modifiedColumns[] = EResourcePeer::PRODUCT_UNAVAILABLE;
		}

		return $this;
	} // setProductUnavailable()

	/**
	 * Set the value of [acq_id] column.
	 * 
	 * @param      int $v new value
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setAcqId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->acq_id !== $v) {
			$this->acq_id = $v;
			$this->modifiedColumns[] = EResourcePeer::ACQ_ID;
		}

		if ($this->aAcquisition !== null && $this->aAcquisition->getId() !== $v) {
			$this->aAcquisition = null;
		}

		return $this;
	} // setAcqId()

	/**
	 * Set the value of [access_info_id] column.
	 * 
	 * @param      int $v new value
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setAccessInfoId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->access_info_id !== $v) {
			$this->access_info_id = $v;
			$this->modifiedColumns[] = EResourcePeer::ACCESS_INFO_ID;
		}

		if ($this->aAccessInfo !== null && $this->aAccessInfo->getId() !== $v) {
			$this->aAccessInfo = null;
		}

		return $this;
	} // setAccessInfoId()

	/**
	 * Set the value of [admin_info_id] column.
	 * 
	 * @param      int $v new value
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setAdminInfoId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->admin_info_id !== $v) {
			$this->admin_info_id = $v;
			$this->modifiedColumns[] = EResourcePeer::ADMIN_INFO_ID;
		}

		if ($this->aAdminInfo !== null && $this->aAdminInfo->getId() !== $v) {
			$this->aAdminInfo = null;
		}

		return $this;
	} // setAdminInfoId()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EResourcePeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EResourcePeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Sets the value of [deleted_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     EResource The current object (for fluent API support)
	 */
	public function setDeletedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->deleted_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->deleted_at !== null && $tmpDt = new DateTime($this->deleted_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->deleted_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EResourcePeer::DELETED_AT;
			}
		} // if either are not null

		return $this;
	} // setDeletedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->language !== 'eng') {
				return false;
			}

			if ($this->suppression !== false) {
				return false;
			}

			if ($this->product_unavailable !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->alt_id = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->subscription_number = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->title = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->sort_title = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->alt_title = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->language = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->description = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->public_note = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->suppression = ($row[$startcol + 9] !== null) ? (boolean) $row[$startcol + 9] : null;
			$this->product_unavailable = ($row[$startcol + 10] !== null) ? (boolean) $row[$startcol + 10] : null;
			$this->acq_id = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->access_info_id = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->admin_info_id = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->created_at = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->updated_at = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->deleted_at = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 17; // 17 = EResourcePeer::NUM_COLUMNS - EResourcePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating EResource object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aAcquisition !== null && $this->acq_id !== $this->aAcquisition->getId()) {
			$this->aAcquisition = null;
		}
		if ($this->aAccessInfo !== null && $this->access_info_id !== $this->aAccessInfo->getId()) {
			$this->aAccessInfo = null;
		}
		if ($this->aAdminInfo !== null && $this->admin_info_id !== $this->aAdminInfo->getId()) {
			$this->aAdminInfo = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EResourcePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = EResourcePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aAcquisition = null;
			$this->aAccessInfo = null;
			$this->aAdminInfo = null;
			$this->collEResourceDbSubjectAssocs = null;
			$this->lastEResourceDbSubjectAssocCriteria = null;

			$this->collUsageAttempts = null;
			$this->lastUsageAttemptCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EResourcePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseEResource:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				EResourcePeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseEResource:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EResourcePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseEResource:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(EResourcePeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(EResourcePeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseEResource:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				EResourcePeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAcquisition !== null) {
				if ($this->aAcquisition->isModified() || $this->aAcquisition->isNew()) {
					$affectedRows += $this->aAcquisition->save($con);
				}
				$this->setAcquisition($this->aAcquisition);
			}

			if ($this->aAccessInfo !== null) {
				if ($this->aAccessInfo->isModified() || $this->aAccessInfo->isNew()) {
					$affectedRows += $this->aAccessInfo->save($con);
				}
				$this->setAccessInfo($this->aAccessInfo);
			}

			if ($this->aAdminInfo !== null) {
				if ($this->aAdminInfo->isModified() || $this->aAdminInfo->isNew()) {
					$affectedRows += $this->aAdminInfo->save($con);
				}
				$this->setAdminInfo($this->aAdminInfo);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = EResourcePeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = EResourcePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += EResourcePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collEResourceDbSubjectAssocs !== null) {
				foreach ($this->collEResourceDbSubjectAssocs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUsageAttempts !== null) {
				foreach ($this->collUsageAttempts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAcquisition !== null) {
				if (!$this->aAcquisition->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAcquisition->getValidationFailures());
				}
			}

			if ($this->aAccessInfo !== null) {
				if (!$this->aAccessInfo->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAccessInfo->getValidationFailures());
				}
			}

			if ($this->aAdminInfo !== null) {
				if (!$this->aAdminInfo->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAdminInfo->getValidationFailures());
				}
			}


			if (($retval = EResourcePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collEResourceDbSubjectAssocs !== null) {
					foreach ($this->collEResourceDbSubjectAssocs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUsageAttempts !== null) {
					foreach ($this->collUsageAttempts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EResourcePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getAltId();
				break;
			case 2:
				return $this->getSubscriptionNumber();
				break;
			case 3:
				return $this->getTitle();
				break;
			case 4:
				return $this->getSortTitle();
				break;
			case 5:
				return $this->getAltTitle();
				break;
			case 6:
				return $this->getLanguage();
				break;
			case 7:
				return $this->getDescription();
				break;
			case 8:
				return $this->getPublicNote();
				break;
			case 9:
				return $this->getSuppression();
				break;
			case 10:
				return $this->getProductUnavailable();
				break;
			case 11:
				return $this->getAcqId();
				break;
			case 12:
				return $this->getAccessInfoId();
				break;
			case 13:
				return $this->getAdminInfoId();
				break;
			case 14:
				return $this->getCreatedAt();
				break;
			case 15:
				return $this->getUpdatedAt();
				break;
			case 16:
				return $this->getDeletedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = EResourcePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getAltId(),
			$keys[2] => $this->getSubscriptionNumber(),
			$keys[3] => $this->getTitle(),
			$keys[4] => $this->getSortTitle(),
			$keys[5] => $this->getAltTitle(),
			$keys[6] => $this->getLanguage(),
			$keys[7] => $this->getDescription(),
			$keys[8] => $this->getPublicNote(),
			$keys[9] => $this->getSuppression(),
			$keys[10] => $this->getProductUnavailable(),
			$keys[11] => $this->getAcqId(),
			$keys[12] => $this->getAccessInfoId(),
			$keys[13] => $this->getAdminInfoId(),
			$keys[14] => $this->getCreatedAt(),
			$keys[15] => $this->getUpdatedAt(),
			$keys[16] => $this->getDeletedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EResourcePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setAltId($value);
				break;
			case 2:
				$this->setSubscriptionNumber($value);
				break;
			case 3:
				$this->setTitle($value);
				break;
			case 4:
				$this->setSortTitle($value);
				break;
			case 5:
				$this->setAltTitle($value);
				break;
			case 6:
				$this->setLanguage($value);
				break;
			case 7:
				$this->setDescription($value);
				break;
			case 8:
				$this->setPublicNote($value);
				break;
			case 9:
				$this->setSuppression($value);
				break;
			case 10:
				$this->setProductUnavailable($value);
				break;
			case 11:
				$this->setAcqId($value);
				break;
			case 12:
				$this->setAccessInfoId($value);
				break;
			case 13:
				$this->setAdminInfoId($value);
				break;
			case 14:
				$this->setCreatedAt($value);
				break;
			case 15:
				$this->setUpdatedAt($value);
				break;
			case 16:
				$this->setDeletedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = EResourcePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setAltId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setSubscriptionNumber($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setTitle($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setSortTitle($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAltTitle($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setLanguage($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setDescription($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setPublicNote($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setSuppression($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setProductUnavailable($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setAcqId($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setAccessInfoId($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setAdminInfoId($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCreatedAt($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setUpdatedAt($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setDeletedAt($arr[$keys[16]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(EResourcePeer::DATABASE_NAME);

		if ($this->isColumnModified(EResourcePeer::ID)) $criteria->add(EResourcePeer::ID, $this->id);
		if ($this->isColumnModified(EResourcePeer::ALT_ID)) $criteria->add(EResourcePeer::ALT_ID, $this->alt_id);
		if ($this->isColumnModified(EResourcePeer::SUBSCRIPTION_NUMBER)) $criteria->add(EResourcePeer::SUBSCRIPTION_NUMBER, $this->subscription_number);
		if ($this->isColumnModified(EResourcePeer::TITLE)) $criteria->add(EResourcePeer::TITLE, $this->title);
		if ($this->isColumnModified(EResourcePeer::SORT_TITLE)) $criteria->add(EResourcePeer::SORT_TITLE, $this->sort_title);
		if ($this->isColumnModified(EResourcePeer::ALT_TITLE)) $criteria->add(EResourcePeer::ALT_TITLE, $this->alt_title);
		if ($this->isColumnModified(EResourcePeer::LANGUAGE)) $criteria->add(EResourcePeer::LANGUAGE, $this->language);
		if ($this->isColumnModified(EResourcePeer::DESCRIPTION)) $criteria->add(EResourcePeer::DESCRIPTION, $this->description);
		if ($this->isColumnModified(EResourcePeer::PUBLIC_NOTE)) $criteria->add(EResourcePeer::PUBLIC_NOTE, $this->public_note);
		if ($this->isColumnModified(EResourcePeer::SUPPRESSION)) $criteria->add(EResourcePeer::SUPPRESSION, $this->suppression);
		if ($this->isColumnModified(EResourcePeer::PRODUCT_UNAVAILABLE)) $criteria->add(EResourcePeer::PRODUCT_UNAVAILABLE, $this->product_unavailable);
		if ($this->isColumnModified(EResourcePeer::ACQ_ID)) $criteria->add(EResourcePeer::ACQ_ID, $this->acq_id);
		if ($this->isColumnModified(EResourcePeer::ACCESS_INFO_ID)) $criteria->add(EResourcePeer::ACCESS_INFO_ID, $this->access_info_id);
		if ($this->isColumnModified(EResourcePeer::ADMIN_INFO_ID)) $criteria->add(EResourcePeer::ADMIN_INFO_ID, $this->admin_info_id);
		if ($this->isColumnModified(EResourcePeer::CREATED_AT)) $criteria->add(EResourcePeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(EResourcePeer::UPDATED_AT)) $criteria->add(EResourcePeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(EResourcePeer::DELETED_AT)) $criteria->add(EResourcePeer::DELETED_AT, $this->deleted_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(EResourcePeer::DATABASE_NAME);

		$criteria->add(EResourcePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of EResource (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setAltId($this->alt_id);

		$copyObj->setSubscriptionNumber($this->subscription_number);

		$copyObj->setTitle($this->title);

		$copyObj->setSortTitle($this->sort_title);

		$copyObj->setAltTitle($this->alt_title);

		$copyObj->setLanguage($this->language);

		$copyObj->setDescription($this->description);

		$copyObj->setPublicNote($this->public_note);

		$copyObj->setSuppression($this->suppression);

		$copyObj->setProductUnavailable($this->product_unavailable);

		$copyObj->setAcqId($this->acq_id);

		$copyObj->setAccessInfoId($this->access_info_id);

		$copyObj->setAdminInfoId($this->admin_info_id);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setDeletedAt($this->deleted_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getEResourceDbSubjectAssocs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEResourceDbSubjectAssoc($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUsageAttempts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUsageAttempt($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     EResource Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     EResourcePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new EResourcePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Acquisition object.
	 *
	 * @param      Acquisition $v
	 * @return     EResource The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAcquisition(Acquisition $v = null)
	{
		if ($v === null) {
			$this->setAcqId(NULL);
		} else {
			$this->setAcqId($v->getId());
		}

		$this->aAcquisition = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Acquisition object, it will not be re-added.
		if ($v !== null) {
			$v->addEResource($this);
		}

		return $this;
	}


	/**
	 * Get the associated Acquisition object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Acquisition The associated Acquisition object.
	 * @throws     PropelException
	 */
	public function getAcquisition(PropelPDO $con = null)
	{
		if ($this->aAcquisition === null && ($this->acq_id !== null)) {
			$this->aAcquisition = AcquisitionPeer::retrieveByPk($this->acq_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAcquisition->addEResources($this);
			 */
		}
		return $this->aAcquisition;
	}

	/**
	 * Declares an association between this object and a AccessInfo object.
	 *
	 * @param      AccessInfo $v
	 * @return     EResource The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAccessInfo(AccessInfo $v = null)
	{
		if ($v === null) {
			$this->setAccessInfoId(NULL);
		} else {
			$this->setAccessInfoId($v->getId());
		}

		$this->aAccessInfo = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AccessInfo object, it will not be re-added.
		if ($v !== null) {
			$v->addEResource($this);
		}

		return $this;
	}


	/**
	 * Get the associated AccessInfo object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AccessInfo The associated AccessInfo object.
	 * @throws     PropelException
	 */
	public function getAccessInfo(PropelPDO $con = null)
	{
		if ($this->aAccessInfo === null && ($this->access_info_id !== null)) {
			$this->aAccessInfo = AccessInfoPeer::retrieveByPk($this->access_info_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAccessInfo->addEResources($this);
			 */
		}
		return $this->aAccessInfo;
	}

	/**
	 * Declares an association between this object and a AdminInfo object.
	 *
	 * @param      AdminInfo $v
	 * @return     EResource The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAdminInfo(AdminInfo $v = null)
	{
		if ($v === null) {
			$this->setAdminInfoId(NULL);
		} else {
			$this->setAdminInfoId($v->getId());
		}

		$this->aAdminInfo = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AdminInfo object, it will not be re-added.
		if ($v !== null) {
			$v->addEResource($this);
		}

		return $this;
	}


	/**
	 * Get the associated AdminInfo object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AdminInfo The associated AdminInfo object.
	 * @throws     PropelException
	 */
	public function getAdminInfo(PropelPDO $con = null)
	{
		if ($this->aAdminInfo === null && ($this->admin_info_id !== null)) {
			$this->aAdminInfo = AdminInfoPeer::retrieveByPk($this->admin_info_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAdminInfo->addEResources($this);
			 */
		}
		return $this->aAdminInfo;
	}

	/**
	 * Clears out the collEResourceDbSubjectAssocs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEResourceDbSubjectAssocs()
	 */
	public function clearEResourceDbSubjectAssocs()
	{
		$this->collEResourceDbSubjectAssocs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEResourceDbSubjectAssocs collection (array).
	 *
	 * By default this just sets the collEResourceDbSubjectAssocs collection to an empty array (like clearcollEResourceDbSubjectAssocs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEResourceDbSubjectAssocs()
	{
		$this->collEResourceDbSubjectAssocs = array();
	}

	/**
	 * Gets an array of EResourceDbSubjectAssoc objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this EResource has previously been saved, it will retrieve
	 * related EResourceDbSubjectAssocs from storage. If this EResource is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EResourceDbSubjectAssoc[]
	 * @throws     PropelException
	 */
	public function getEResourceDbSubjectAssocs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EResourcePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEResourceDbSubjectAssocs === null) {
			if ($this->isNew()) {
			   $this->collEResourceDbSubjectAssocs = array();
			} else {

				$criteria->add(EResourceDbSubjectAssocPeer::ER_ID, $this->id);

				EResourceDbSubjectAssocPeer::addSelectColumns($criteria);
				$this->collEResourceDbSubjectAssocs = EResourceDbSubjectAssocPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EResourceDbSubjectAssocPeer::ER_ID, $this->id);

				EResourceDbSubjectAssocPeer::addSelectColumns($criteria);
				if (!isset($this->lastEResourceDbSubjectAssocCriteria) || !$this->lastEResourceDbSubjectAssocCriteria->equals($criteria)) {
					$this->collEResourceDbSubjectAssocs = EResourceDbSubjectAssocPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEResourceDbSubjectAssocCriteria = $criteria;
		return $this->collEResourceDbSubjectAssocs;
	}

	/**
	 * Returns the number of related EResourceDbSubjectAssoc objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EResourceDbSubjectAssoc objects.
	 * @throws     PropelException
	 */
	public function countEResourceDbSubjectAssocs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EResourcePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEResourceDbSubjectAssocs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EResourceDbSubjectAssocPeer::ER_ID, $this->id);

				$count = EResourceDbSubjectAssocPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EResourceDbSubjectAssocPeer::ER_ID, $this->id);

				if (!isset($this->lastEResourceDbSubjectAssocCriteria) || !$this->lastEResourceDbSubjectAssocCriteria->equals($criteria)) {
					$count = EResourceDbSubjectAssocPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEResourceDbSubjectAssocs);
				}
			} else {
				$count = count($this->collEResourceDbSubjectAssocs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EResourceDbSubjectAssoc object to this object
	 * through the EResourceDbSubjectAssoc foreign key attribute.
	 *
	 * @param      EResourceDbSubjectAssoc $l EResourceDbSubjectAssoc
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEResourceDbSubjectAssoc(EResourceDbSubjectAssoc $l)
	{
		if ($this->collEResourceDbSubjectAssocs === null) {
			$this->initEResourceDbSubjectAssocs();
		}
		if (!in_array($l, $this->collEResourceDbSubjectAssocs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEResourceDbSubjectAssocs, $l);
			$l->setEResource($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this EResource is new, it will return
	 * an empty collection; or if this EResource has previously
	 * been saved, it will retrieve related EResourceDbSubjectAssocs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in EResource.
	 */
	public function getEResourceDbSubjectAssocsJoinDbSubject($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EResourcePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEResourceDbSubjectAssocs === null) {
			if ($this->isNew()) {
				$this->collEResourceDbSubjectAssocs = array();
			} else {

				$criteria->add(EResourceDbSubjectAssocPeer::ER_ID, $this->id);

				$this->collEResourceDbSubjectAssocs = EResourceDbSubjectAssocPeer::doSelectJoinDbSubject($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EResourceDbSubjectAssocPeer::ER_ID, $this->id);

			if (!isset($this->lastEResourceDbSubjectAssocCriteria) || !$this->lastEResourceDbSubjectAssocCriteria->equals($criteria)) {
				$this->collEResourceDbSubjectAssocs = EResourceDbSubjectAssocPeer::doSelectJoinDbSubject($criteria, $con, $join_behavior);
			}
		}
		$this->lastEResourceDbSubjectAssocCriteria = $criteria;

		return $this->collEResourceDbSubjectAssocs;
	}

	/**
	 * Clears out the collUsageAttempts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUsageAttempts()
	 */
	public function clearUsageAttempts()
	{
		$this->collUsageAttempts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUsageAttempts collection (array).
	 *
	 * By default this just sets the collUsageAttempts collection to an empty array (like clearcollUsageAttempts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUsageAttempts()
	{
		$this->collUsageAttempts = array();
	}

	/**
	 * Gets an array of UsageAttempt objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this EResource has previously been saved, it will retrieve
	 * related UsageAttempts from storage. If this EResource is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UsageAttempt[]
	 * @throws     PropelException
	 */
	public function getUsageAttempts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EResourcePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsageAttempts === null) {
			if ($this->isNew()) {
			   $this->collUsageAttempts = array();
			} else {

				$criteria->add(UsageAttemptPeer::ER_ID, $this->id);

				UsageAttemptPeer::addSelectColumns($criteria);
				$this->collUsageAttempts = UsageAttemptPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UsageAttemptPeer::ER_ID, $this->id);

				UsageAttemptPeer::addSelectColumns($criteria);
				if (!isset($this->lastUsageAttemptCriteria) || !$this->lastUsageAttemptCriteria->equals($criteria)) {
					$this->collUsageAttempts = UsageAttemptPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUsageAttemptCriteria = $criteria;
		return $this->collUsageAttempts;
	}

	/**
	 * Returns the number of related UsageAttempt objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UsageAttempt objects.
	 * @throws     PropelException
	 */
	public function countUsageAttempts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EResourcePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUsageAttempts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UsageAttemptPeer::ER_ID, $this->id);

				$count = UsageAttemptPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UsageAttemptPeer::ER_ID, $this->id);

				if (!isset($this->lastUsageAttemptCriteria) || !$this->lastUsageAttemptCriteria->equals($criteria)) {
					$count = UsageAttemptPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUsageAttempts);
				}
			} else {
				$count = count($this->collUsageAttempts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UsageAttempt object to this object
	 * through the UsageAttempt foreign key attribute.
	 *
	 * @param      UsageAttempt $l UsageAttempt
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUsageAttempt(UsageAttempt $l)
	{
		if ($this->collUsageAttempts === null) {
			$this->initUsageAttempts();
		}
		if (!in_array($l, $this->collUsageAttempts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUsageAttempts, $l);
			$l->setEResource($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this EResource is new, it will return
	 * an empty collection; or if this EResource has previously
	 * been saved, it will retrieve related UsageAttempts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in EResource.
	 */
	public function getUsageAttemptsJoinLibrary($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EResourcePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsageAttempts === null) {
			if ($this->isNew()) {
				$this->collUsageAttempts = array();
			} else {

				$criteria->add(UsageAttemptPeer::ER_ID, $this->id);

				$this->collUsageAttempts = UsageAttemptPeer::doSelectJoinLibrary($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UsageAttemptPeer::ER_ID, $this->id);

			if (!isset($this->lastUsageAttemptCriteria) || !$this->lastUsageAttemptCriteria->equals($criteria)) {
				$this->collUsageAttempts = UsageAttemptPeer::doSelectJoinLibrary($criteria, $con, $join_behavior);
			}
		}
		$this->lastUsageAttemptCriteria = $criteria;

		return $this->collUsageAttempts;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collEResourceDbSubjectAssocs) {
				foreach ((array) $this->collEResourceDbSubjectAssocs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUsageAttempts) {
				foreach ((array) $this->collUsageAttempts as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collEResourceDbSubjectAssocs = null;
		$this->collUsageAttempts = null;
			$this->aAcquisition = null;
			$this->aAccessInfo = null;
			$this->aAdminInfo = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseEResource:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseEResource::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseEResource
