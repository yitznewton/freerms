<?php

require 'lib/model/om/BaseIpRegEventPeer.php';


/**
 * Skeleton subclass for performing query and update operations on the 'ip_reg_events' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Thu May 13 10:33:23 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class IpRegEventPeer extends BaseIpRegEventPeer {
  public static function retrieveAutoEmail()
  {
    $c = new Criteria();

    $c->setDistinct();
    $c->addJoin( IpRangePeer::ID, IpRegEventPeer::IP_RANGE_ID );
    $c->addJoin( IpRangePeer::LIB_ID, LibraryPeer::ID );
    $c->addJoin( LibraryPeer::ID, AcqLibAssocPeer::LIB_ID );
    $c->addJoin( AcqLibAssocPeer::ACQ_ID, AcquisitionPeer::ID );
    $c->addJoin( AcquisitionPeer::ID, EResourcePeer::ACQ_ID );
    $c->addJoin( AcquisitionPeer::VENDOR_ORG_ID, OrganizationPeer::ID );
    $c->addJoin( OrganizationPeer::IP_REG_METHOD_ID, IpRegMethodPeer::ID );
    $c->addJoin( OrganizationPeer::ID, ContactPeer::ORG_ID );
    $c->add( EResourcePeer::SUPPRESSION, false );
    $c->add( OrganizationPeer::IP_REG_FORCE_MANUAL, false );
    $c->add( IpRegMethodPeer::LABEL, 'email' );
    $c->add( ContactPeer::EMAIL, null, Criteria::ISNOTNULL );
    $c->addAscendingOrderByColumn( LibraryPeer::NAME );
    $c->addAscendingOrderByColumn( IpRangePeer::START_IP );

    return IpRegEventPeer::doSelect( $c );
  }

  public static function retrieveManualEmailArray()
  {
    $c = new Criteria();

    $c->setDistinct();
    $c->addJoin( IpRangePeer::ID, IpRegEventPeer::IP_RANGE_ID );
    $c->addJoin( IpRangePeer::LIB_ID, LibraryPeer::ID );
    $c->addJoin( LibraryPeer::ID, AcqLibAssocPeer::LIB_ID );
    $c->addJoin( AcqLibAssocPeer::ACQ_ID, AcquisitionPeer::ID );
    $c->addJoin( AcquisitionPeer::ID, EResourcePeer::ACQ_ID );
    $c->addJoin( AcquisitionPeer::VENDOR_ORG_ID, OrganizationPeer::ID );
    $c->addJoin( OrganizationPeer::IP_REG_METHOD_ID, IpRegMethodPeer::ID );
    $c->addJoin( OrganizationPeer::IP_REG_CONTACT_ID, ContactPeer::ID );
    $c->add( EResourcePeer::SUPPRESSION, false );
    $c->add( OrganizationPeer::IP_REG_FORCE_MANUAL, true );
    $c->add( IpRegMethodPeer::LABEL, 'email' );

    $c1 = clone $c;
    $c1->add( ContactPeer::EMAIL, null, Criteria::ISNOTNULL );
    $c1->addAscendingOrderByColumn( ContactPeer::LAST_NAME );
    $c1->addAscendingOrderByColumn( ContactPeer::FIRST_NAME );

    $contacts = ContactPeer::doSelect( $c1 );
    $c1->clear();

    $ret = array();

    foreach ( $contacts as $contact ) {
      $c1 = clone $c;
      $c1->add( ContactPeer::ID, $contact->getId() );
      $c1->addAscendingOrderByColumn( IpRegEventPeer::OLD_START_IP );
      $c1->addAscendingOrderByColumn( IpRegEventPeer::NEW_START_IP );
      $ip_reg_events = IpRegEventPeer::doSelect( $c1 );

      $c1->clear();

      $ret[] = array( 'contact' => $contact, 'ip_reg_events' => $ip_reg_events );
    }

    return $ret;
  }

  public static function retrievePhoneArray()
  {
    $c = new Criteria();

    $c->setDistinct();
    $c->addJoin( IpRangePeer::ID, IpRegEventPeer::IP_RANGE_ID );
    $c->addJoin( IpRangePeer::LIB_ID, LibraryPeer::ID );
    $c->addJoin( LibraryPeer::ID, AcqLibAssocPeer::LIB_ID );
    $c->addJoin( AcqLibAssocPeer::ACQ_ID, AcquisitionPeer::ID );
    $c->addJoin( AcquisitionPeer::ID, EResourcePeer::ACQ_ID );
    $c->addJoin( AcquisitionPeer::VENDOR_ORG_ID, OrganizationPeer::ID );
    $c->addJoin( OrganizationPeer::IP_REG_METHOD_ID, IpRegMethodPeer::ID );
    $c->addJoin( OrganizationPeer::IP_REG_CONTACT_ID, ContactPeer::ID );
    $c->add( EResourcePeer::SUPPRESSION, false );
    $c->add( IpRegMethodPeer::LABEL, 'phone' );

    $c1 = clone $c;
    $c1->add( ContactPeer::PHONE, null, Criteria::ISNOTNULL );
    $c1->addAscendingOrderByColumn( ContactPeer::LAST_NAME );
    $c1->addAscendingOrderByColumn( ContactPeer::FIRST_NAME );

    $contacts = ContactPeer::doSelect( $c1 );
    $c1->clear();

    $ret = array();

    foreach ( $contacts as $contact ) {
      $c1 = clone $c;
      $c1->add( ContactPeer::ID, $contact->getId() );
      $c1->addAscendingOrderByColumn( IpRegEventPeer::OLD_START_IP );
      $c1->addAscendingOrderByColumn( IpRegEventPeer::NEW_START_IP );
      $ip_reg_events = IpRegEventPeer::doSelect( $c1 );

      $c1->clear();

      $ret[] = array( 'contact' => $contact, 'ip_reg_events' => $ip_reg_events );
    }

    return $ret;
  }
} // IpRegEventPeer
