<?php

require 'lib/model/om/BaseOrganization.php';


/**
 * Skeleton subclass for representing a row from the 'organizations' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Fri Apr 23 11:34:24 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Organization extends BaseOrganization {
  protected $ip_reg_events;

  public function __toString()
  {
    return $this->getName();
  }

  public function getDistinctIpRegEvents()
  {
    $c = new Criteria();
    $c->addSelectColumn( IpRegEventPeer::IP_RANGE_ID );
    $c->addSelectColumn( IpRegEventPeer::OLD_START_IP );
    $c->addSelectColumn( IpRegEventPeer::NEW_START_IP );
    $c->addSelectColumn( IpRegEventPeer::OLD_END_IP );
    $c->addSelectColumn( IpRegEventPeer::NEW_END_IP );
    $c->addJoin( IpRegEventPeer::ACQ_ID, AcquisitionPeer::ID );
    $c->add( AcquisitionPeer::VENDOR_ORG_ID, $this->getId() );
    $c->addAscendingOrderByColumn( IpRegEventPeer::OLD_START_IP );
    $c->addAscendingOrderByColumn( IpRegEventPeer::NEW_START_IP );
    $c->setDistinct();

    $con = Propel::getConnection(IpRegEventPeer::DATABASE_NAME, Propel::CONNECTION_READ);
    $stmt = BasePeer::doSelect( $c, $con );
    
    $ret = array();

    while ( $record = $stmt->fetch( PDO::FETCH_ASSOC ) ) {
      $dummy_ip_reg_event = new IpRegEvent();
      $dummy_ip_reg_event->fromDistinctArray( $record );

      $ret[] = $dummy_ip_reg_event;
    }

    return $ret;
  }

  public function getIpRegEvents()
  {
    if ( isset( $this->ip_reg_events ) ) {
      return $this->ip_reg_events;
    }

    $c = new Criteria();
    $c->addJoin( IpRegEventPeer::IP_RANGE_ID, IpRangePeer::ID );
    $c->addJoin( IpRangePeer::LIB_ID, AcqLibAssocPeer::LIB_ID );
    $c->addJoin( AcqLibAssocPeer::ACQ_ID, AcquisitionPeer::ID );
    $c->add( AcquisitionPeer::VENDOR_ORG_ID, $this->getId() );
    $c->addAscendingOrderByColumn( IpRegEventPeer::OLD_START_IP );
    $c->addAscendingOrderByColumn( IpRegEventPeer::NEW_START_IP );

    return $this->ip_reg_events = IpRegEventPeer::doSelectJoinIpRange( $c );
  }
} // Organization
